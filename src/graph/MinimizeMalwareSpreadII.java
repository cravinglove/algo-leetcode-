package graph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MinimizeMalwareSpreadII {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // construct infectedBy which represents every node in graph except initial node infected by which initial node
        int N = graph.length;
        ArrayList<Integer>[] infectedBy = new ArrayList[N];
        for(int i = 0; i < N; i++)
            infectedBy[i] = new ArrayList<>();
        // mark initial node which is 0, normal node is 1
        int[] clean = new int[N];
        Arrays.fill(clean, 1);
        for(int i : initial)
            clean[i] = 0;
        for(int i : initial) {
            Set<Integer> seen = new HashSet<>();
            dfs(graph, clean, seen, i);
            for(int v : seen)
                infectedBy[v].add(i);
        }

        // find size of infectedBy item is 1, which is contributes to the initial node
        int[] contributions = new int[N];
        for(int i = 0; i < infectedBy.length; i++) {
            if(infectedBy[i].size() == 1) {
                contributions[infectedBy[i].get(0)]++;
            }
        }

        // if find, return initial node which has most contributions, else return the node has smallest index in initial
        Arrays.sort(initial);
        int res = initial[0], max = 0;
        for(int i = 0; i < contributions.length; i++) {
            if(contributions[i] > max){
                res = i;
                max = contributions[i];
            }
        }
        return res;
    }

    private void dfs(int[][] graph, int[] clean, Set<Integer> seen, int v) {
        for(int j = 0; j < graph[v].length; j++) {
            if(graph[v][j] == 1 && clean[j] == 1 && !seen.contains(j)) {
                seen.add(j);
                dfs(graph, clean, seen, j);
            }
        }
    }
}
