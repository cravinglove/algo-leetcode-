package graph;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MInimizeMalwareSpread {
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        UF uf = new UF(N);
        Map<Integer, Integer> map = new HashMap<>();
        Arrays.sort(initial);
        int res = initial[0];

        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        for(int i : initial) {
            if(!map.containsKey(uf.find(i))) map.put(uf.find(i), 1);
            else map.put(uf.find(i), map.get(uf.find(i))+1);
        }

        int size = 0;

        for(int i : initial) {
            int root = uf.find(i);
            System.out.println(uf.size(root));
            if(map.get(root) == 1 && uf.size(root) > size) {
                res = i;
                size = uf.size(root);
            }
        }
        return res;
    }


    private static class UF {
        private int[] parents;
        private int[] size;
        private int count;

        public UF(int N){
            parents = new int[N];
            size = new int[N];
            for(int i = 0; i < N; i++) {
                parents[i] = i;
                size[i] = 1;
            }
            count = N;
        }

        public int size(int i) {return size[i];}

        public int count() {return count;}

        public int find(int p) {
            while(p != parents[p])
                p = parents[p];
            return p;
        }


        public void union(int p, int q) {
            int pid = find(p);
            int qid = find(q);
            if(pid == qid) return;
            if(size[pid] < size[qid]) {
                parents[pid] = qid;
                size[qid] += size[pid];
            } else {
                parents[qid] = pid;
                size[pid] += size[qid];
            }
            count--;
        }
     }
     public static void main(String[] args) {
         int[][] graph = {{1, 0,0,0},{0,1,0,0},{0,0,1,1}, {0,0,1,1}};
         int[] a = {1, 3};
         System.out.print(minMalwareSpread(graph, a));
     }
}
